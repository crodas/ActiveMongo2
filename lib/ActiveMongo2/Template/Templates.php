<?php
/**
 *  This file was generated with crodas/SimpleView (https://github.com/crodas/SimpleView)
 *  Do not edit this file.
 *
 */

namespace {

    class base_template_df562f12800ad133cdbc6f040ca106a099504656
    {
        protected $parent;
        protected $child;
        protected $context;

        public function yield_parent($name, $args)
        {
            $method = "section_" . sha1($name);

            if (is_callable(array($this->parent, $method))) {
                $this->parent->$method(array_merge($this->context, $args));
                return true;
            }

            if ($this->parent) {
                return $this->parent->yield_parent($name, $args);
            }

            return false;
        }

        public function do_yield($name, Array $args = array())
        {
            if ($this->child) {
                // We have a children template, we are their base
                // so let's see if they have implemented by any change
                // this section
                if ($this->child->do_yield($name, $args)) {
                    // yes!
                    return true;
                }
            }

            // Do I have this section defined?
            $method = "section_" . sha1($name);
            if (is_callable(array($this, $method))) {
                // Yes!
                $this->$method(array_merge($this->context, $args));
                return true;
            }

            // No :-(
            return false;
        }

    }

    /** 
     *  Template class generated from Callback.tpl
     */
    class class_1895ec604b22a2e3f627b9d8d7ae6142d332247e extends base_template_df562f12800ad133cdbc6f040ca106a099504656
    {

        public function render(Array $vars = array(), $return = false)
        {
            $this->context = $vars;

            extract($vars);
            if ($return) {
                ob_start();
            }
            echo "if (empty(self::\$loaded[";
            var_export($self->getPath());
            echo "])) {\n    if (!class_exists(";
            var_export($self->getClass());
            echo ", false)) {\n        require __DIR__ . ";
            var_export($self->getPath());
            echo ";\n    }\n    self::\$loaded[";
            var_export($self->getPath());
            echo "] = true;\n}\n\n\$args = empty(\$args) ? [] : \$args;\n\n";
            if ($self->isEmbeddable()) {
                echo "    " . ($self->toEmbedCode($var)) . "\n";
            }
            else if ($self->isMethod()) {
                if ($self->isPublic()) {
                    if ($self->isStatic()) {
                        echo "            \$return = \\" . ($self->getClass()) . "::" . ($self->getMethod()) . "(\n";
                    }
                    else if ($prop->getClass() == $self->getClass()) {
                        echo "            \$return = \$document->" . ($self->getMethod()) . "(\n";
                    }
                    else {
                        echo "            // Improve me (should construct once and reuse it)\n            \$return = (new \\" . ($self->getClass()) . ")->" . ($self->getMethod()) . "(\n";
                    }

                    echo "            " . ($var) . ", // document variable \n            \$args,  // external arguments (defined at run time)\n            \$this->connection, // connection\n            ";
                    var_export($args);
                    echo ", // annotation arguments\n            \$this // mapper instance\n        );\n";
                }
                else {
                    echo "        \$reflection = new \\ReflectionMethod(";
                    var_export("\\". $self->getClass());
                    echo ", ";
                    var_export($self->getMethod());
                    echo ");\n        \$reflection->setAccessible(true);\n        \$return = \$reflection->invoke(\n            " . ($var) . ", // document variable \n            \$args,  // external arguments (defined at run time)\n            \$this->connection, // connection\n            ";
                    var_export($args);
                    echo ", // annotation arguments\n            \$this // mapper instance\n        );\n";
                }
            }
            else {
                echo "    \$return = \\" . ($self->getFunction()) . "(\n        " . ($var) . ", // document variable \n        \$args,  // external arguments (defined at run time)\n        \$this->connection, // connection\n        ";
                var_export($args);
                echo ", // annotation arguments\n        \$this // mapper instance\n    );\n";
            }


            if ($return) {
                return ob_get_clean();
            }

        }
    }

    /** 
     *  Template class generated from Reference/Update.tpl.php
     */
    class class_f8c39509b1fb331e8b8ef22a135640af98725ce5 extends base_template_df562f12800ad133cdbc6f040ca106a099504656
    {

        public function render(Array $vars = array(), $return = false)
        {
            $this->context = $vars;

            extract($vars);
            if ($return) {
                ob_start();
            }
            $deferred_done = false;
            foreach($collection->getForwardReferences() as $ref) {
                echo "    // update " . ($collection->getName()) . " references in  " . ($ref['property']->getParent()->getName()) . " \n";
                if ($ref['deferred']) {
                    if (!empty($deferred_done)) {
                        continue;
                    }
                }
                echo "    \n    \$replicate = array();\n";
                $deferred_done = true;
                echo "    foreach (\$args[0] as \$operation => \$values) {\n";
                foreach($ref['update'] as $field) {
                    echo "            if (!empty(\$values[";
                    var_export($field);
                    echo "])) {\n";
                    if ($ref['deferred']) {
                        echo "                    \$replicate[\$operation][";
                        var_export($field);
                        echo "]  = \$values[";
                        var_export($field);
                        echo "];\n";
                    }
                    else if ($ref['multi']) {
                        echo "                    \$replicate[\$operation][";
                        var_export($ref['property']->getName().'.$.'.$field);
                        echo "] = \$values[";
                        var_export($field);
                        echo "];\n";
                    }
                    else {
                        echo "                    \$replicate[\$operation][";
                        var_export($ref['property']->getName().'.'.$field);
                        echo "] = \$values[";
                        var_export($field);
                        echo "];\n";
                    }

                    echo "            }\n";
                }
                echo "    }\n\n";
                if ($ref['deferred']) {
                    echo "        if (!empty(\$replicate)) {\n            // queue the updates!\n            \$data = array(\n                'update'    => \$replicate,\n                'processed' => false,\n                'created'   => new \\DateTime,\n                'source_id' => ";
                    var_export($collection->getName().'::');
                    echo "  . serialize(\$args[2]),\n                'type'      => array(\n                    'source'    => ";
                    var_export($collection->getName());
                    echo ",\n                    'target'    => ";
                    var_export($ref['property']->getParent()->getName());
                    echo ",\n                ),\n            );\n            \$args[1]\n                ->getDatabase()\n                ->deferred_queue\n                ->save(\$data, array('w' => 0));\n        }\n";
                    continue;
                }
                echo "\n    if (!empty(\$replicate)) {\n        // do the update\n        \$args[1]->getCollection(";
                var_export($ref['property']->getParent()->getName());
                echo ")\n            ->update([\n                '" . ($ref['property']->getName()) . ".\$id' => \$args[2]], \n                \$replicate, \n                ['w' => 0, 'multi' => true]\n        );\n    }\n";
            }

            if ($return) {
                return ob_get_clean();
            }

        }
    }

    /** 
     *  Template class generated from Reference/Deferred.tpl.php
     */
    class class_7e3d172c6b9ee7fd7d68e93c41ee0d852447ceca extends base_template_df562f12800ad133cdbc6f040ca106a099504656
    {

        public function render(Array $vars = array(), $return = false)
        {
            $this->context = $vars;

            extract($vars);
            if ($return) {
                ob_start();
            }
            foreach($collection->getBackReferences() as $ref) {
                if ($ref['deferred']) {
                    if ($ev == "postCreate") {
                        echo "            \$check = !empty(\$args[0][";
                        var_export($ref['property']->getName());
                        echo "]);\n";
                    }
                    else {
                        echo "            \$check = !empty(\$args[0]['\$set'][";
                        var_export($ref['property']->getName());
                        echo "]);\n";
                    }
                    echo "        if (\$check) {\n";
                    if ($ref['multi']) {
                        echo "                \$data = array();\n";
                        if ($ev == "postCreate") {
                            echo "                    \$fields = \$args[0][";
                            var_export($ref['property']->getName());
                            echo "];\n";
                        }
                        else {
                            echo "                    \$fields = \$args[0]['\$set'][";
                            var_export($ref['property']->getName());
                            echo "];\n";
                        }
                        echo "                foreach (\$fields as \$id => \$row) {\n                    \$data[] = array(\n";
                        if ($ev == "postCreate") {
                            echo "                        'source_id' => ";
                            var_export($ref['target']->getName() . '::');
                            echo " . serialize(\$row['\$id']),\n                        'id'        => \$args[0]['_id'],\n";
                        }
                        else {
                            echo "                        'source_id' => ";
                            var_export($ref['target']->getName() . '::');
                            echo " . serialize(\$row['\$id']),\n                        'id'        => \$args[2],\n";
                        }
                        echo "                        'property'  => ";
                        var_export($ref['property']->getName() . '.');
                        echo " . \$id,\n                    );\n                }\n";
                    }
                    else {
                        echo "                \$data = array(array(\n";
                        if ($ev == "postCreate") {
                            echo "                    'source_id'     => ";
                            var_export($ref['target']->getName() . '::');
                            echo " . serialize(\$args[0][";
                            var_export($ref['property']->getName());
                            echo "]['\$id']),\n                    'id'            => \$args[0]['_id'],\n";
                        }
                        else {
                            echo "                    'source_id'     => ";
                            var_export($ref['target']->getName() . '::');
                            echo " . serialize(\$args[0]['\$set'][";
                            var_export($ref['property']->getName());
                            echo "]['\$id']),\n                    'id'            => \$args[2],\n";
                        }
                        echo "                    'property'      => ";
                        var_export($ref['property']->getName());
                        echo ",\n                ));\n";
                    }
                    echo "            foreach (\$data as \$row) {\n                \$row['collection'] = ";
                    var_export($ref['property']->getParent()->getName());
                    echo ";\n                \$row['_id'] = array(\n                    'source' => \$row['source_id'], \n                    'target_id' => \$row['id'], \n                    'target_col' => \$row['collection'], \n                    'target_prop' => \$row['property']\n                );\n                \$col->save(\$row, array('w' => 1));\n            }\n        }\n";
                }
            }

            if ($return) {
                return ob_get_clean();
            }

        }
    }

    /** 
     *  Template class generated from Documents.tpl.php
     */
    class class_4c3d011cafbc519bc12f3ed430a4e169ad8b5e8b extends base_template_df562f12800ad133cdbc6f040ca106a099504656
    {

        public function render(Array $vars = array(), $return = false)
        {
            $this->context = $vars;

            extract($vars);
            if ($return) {
                ob_start();
            }
            echo "<?php\n\nnamespace ActiveMongo2\\Generated" . ($namespace) . ";\n\nuse ActiveMongo2\\Connection;\n\n";
            $instance = '_' . uniqid(true);
            echo "\nclass Mapper\n{\n    protected \$mapper = " . (var_export($collections->byName(), true)) . ";\n    protected \$class_mapper = " . (var_export($collections->byClass(), true)) . ";\n    protected static \$loaded = array();\n    protected \$connection;\n\n    public function __construct(Connection \$conn)\n    {\n        \$this->connection = \$conn;\n        spl_autoload_register(array(\$this, '__autoloader'));\n    }\n\n    public function getClass(\$name)\n    {\n        \$class = __NAMESPACE__ . \"\\\\\$name\";\n        if (!class_exists(\$class, false)) {\n            \$define = __NAMESPACE__ . \"\\\\define_class_\" . sha1(\$name);\n            \$define();\n        }\n\n        return \$class;\n    }\n\n    protected function array_diff(Array \$arr1, Array \$arr2)\n    {\n        \$diff = array();\n        foreach (\$arr1 as \$key => \$value) {\n            if (empty(\$arr2[\$key]) || \$arr2[\$key] !== \$arr1[\$key]) {\n                \$diff[\$key] = \$value;\n            }\n        }\n        return \$diff;\n    }\n\n\n    public function __autoloader(\$class)\n    {\n        \$class = strtolower(\$class);\n        if (!empty(\$this->class_mapper[\$class])) {\n            self::\$loaded[\$this->class_mapper[\$class]['file']] = true;\n            require __DIR__ . \$this->class_mapper[\$class]['file'];\n\n            return true;\n        }\n        return false;\n    }\n\n    public function getCollectionObject(\$col, \$db)\n    {\n        if (empty(\$this->mapper[\$col])) {\n            \$data = \$this->mapClass(\$col);     \n        } else {\n            \$data = \$this->mapper[\$col];\n        }\n\n        if (empty(self::\$loaded[\$data['file']])) {\n            if (!class_exists(\$data['class'], false)) {\n                require __DIR__ .  \$data['file'];\n            }\n            self::\$loaded[\$data['file']] = true;\n        }\n\n        if (!empty(\$data['is_gridfs'])) {\n            \$col = \$db->getGridFs(\$data['name']);\n        } else {\n            \$col = \$db->selectCollection(\$data['name']);\n        }\n\n        return [\$col, \$data['class']];\n        var_dump(\$col, \$data);exit;\n\n    }\n\n    public function mapCollection(\$col)\n    {\n        if (empty(\$this->mapper[\$col])) {\n            throw new \\RuntimeException(\"Cannot map {\$col} collection to its class\");\n        }\n\n        \$data = \$this->mapper[\$col];\n\n        if (empty(self::\$loaded[\$data['file']])) {\n            if (!class_exists(\$data['class'], false)) {\n                require __DIR__ .  \$data['file'];\n            }\n            self::\$loaded[\$data['file']] = true;\n        }\n\n        return \$data;\n    }\n\n    public function onQuery(\$table, Array &\$query)\n    {\n        switch (\$table) {\n";
            foreach($collections as $collection) {
                if ($collection->is('SingleCollection') && $collection->getParent()) {
                    echo "            case ";
                    var_export($collection->getClass());
                    echo ":\n                \$query[";
                    var_export($collection->getDiscriminator());
                    echo "] = ";
                    var_export($collection->getClass());
                    echo ";\n            break;\n";
                }
            }
            echo "        }\n    }\n\n    public function mapClass(\$class)\n    {\n        if (is_object(\$class)) {\n            \$class = \$this->get_class(\$class);\n        }\n\n        \$class = strtolower(\$class);\n        if (empty(\$this->class_mapper[\$class])) {\n";
            foreach($collections as $collection) {
                if ($collection->is('SingleCollection')) {
                    echo "                if (\$class == ";
                    var_export($collection->getClass());
                    echo " ||  \$class == ";
                    var_export($collection->getName());
                    echo "){\n                    return ";
                    var_export(['name' => $collection->getName(), 'dynamic' => true, 'prop' => $collection->getDiscriminator(), 'class' => NULL]);
                    echo ";\n                }\n";
                }
            }
            echo "            throw new \\RuntimeException(\"Cannot map class {\$class} to its document\");\n        }\n\n        \$data = \$this->class_mapper[\$class];\n\n        if (empty(self::\$loaded[\$data['file']])) {\n            if (class_exists(\$data['class'], false)) {\n                require __DIR__ . \$data['file'];\n            }\n            self::\$loaded[\$data['file']] = true;\n        }\n\n        return \$data;\n    }\n\n    protected function array_unique(\$array, \$toRemove)\n    {\n        \$return = array();\n        \$count  = array();\n        foreach (\$array as \$key => \$value) {\n            \$val = serialize(\$value);\n            if (empty(\$count[\$val])) {\n                \$count[\$val] = 0;\n            }\n            \$count[\$val]++; \n        }\n        foreach (\$toRemove as \$value) {\n            \$val = serialize(\$value);\n            if (!empty(\$count[\$val]) && \$count[\$val] != 1) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public function mapObject(\$object)\n    {\n        \$class = strtolower(\$this->get_class(\$object));\n        if (empty(\$this->class_mapper[\$class])) {\n            throw new \\RuntimeException(\"Cannot map class {\$class} to its document\");\n        }\n\n        return \$this->class_mapper[\$class];\n    }\n\n    public function getReference(\$object, Array \$extra = array())\n    {\n        \$class = strtolower(\$this->get_class(\$object));\n        if (empty(\$this->class_mapper[\$class])) {\n            throw new \\RuntimeException(\"Cannot map class {\$class} to its document\");\n        }\n\n        return \$this->{\"get_reference_\" . sha1(\$class)}(\$object, \$extra);\n    }\n\n    public function getDocument(\$object)\n    {\n        \$class = strtolower(\$this->get_class(\$object));\n        if (empty(\$this->class_mapper[\$class])) {\n            throw new \\RuntimeException(\"Cannot map class {\$class} to its document\");\n        }\n\n        return \$this->{\"get_array_\" . sha1(\$class)}(\$object);\n    }\n\n    public function validate(\$object)\n    {\n        \$class = strtolower(\$this->get_class(\$object));\n        if (empty(\$this->class_mapper[\$class])) {\n            throw new \\RuntimeException(\"Cannot map class {\$class} to its document\");\n        }\n\n        return \$this->{\"validate_\" . sha1(\$class)}(\$object);\n    }\n\n    public function update(\$object, Array &\$doc, Array \$old)\n    {\n        \$class = strtolower(\$this->get_class(\$object));\n        if (empty(\$this->class_mapper[\$class])) {\n            throw new \\RuntimeException(\"Cannot map class {\$class} to its document\");\n        }\n\n        return \$this->{\"update_\" . sha1(\$class)}(\$doc, \$old);\n    }\n\n    public function getRawDocument(\$object)\n    {\n        if (\$object instanceof ActiveMongo2Mapped){\n            return \$object->" . ($instance) . "_getOriginal();\n        }\n\n        return array();\n    }\n\n    public function populate(&\$object, \$data)\n    {\n        \$class = strtolower(\$this->get_class(\$object));\n\n        if (empty(\$this->class_mapper[\$class])) {\n            throw new \\RuntimeException(\"Cannot map class {\$class} to its document\");\n        }\n\n        return \$this->{\"populate_\" . sha1(\$class)}(\$object, \$data);\n    }\n\n    public function trigger(\$event, \$object, Array \$args = array())\n    {\n        if (\$object instanceof \\ActiveMongo2\\Reference) {\n            \$class = strtolower(\$object->getClass());\n        } else {\n            \$class = strtolower(\$this->get_class(\$object));\n        }\n        \$method = \"event_{\$event}_\" . sha1(\$class);\n        if (!is_callable(array(\$this, \$method))) {\n            throw new \\RuntimeException(\"Cannot trigger {\$event} event on '\$class' objects\");\n        }\n\n        return \$this->\$method(\$object, \$args);\n    }\n\n    public function getMapping(\$class)\n    {\n        if (is_object(\$class)) {\n            \$class = \$this->get_class(\$class);\n        }\n        \$func  = \"get_mapping_\" . sha1(\$class);\n        if (!is_callable(array(\$this, \$func))) {\n            throw new \\Exception(\"Cannot map \$class\");\n        }\n        return \$this->\$func();\n    }\n\n    public function getObjectClass(\$col, \$doc)\n    {\n        if (\$doc instanceof \\MongoGridFsFile) {\n            \$doc = \$doc->file;\n        }\n        if (\$col instanceof \\MongoCollection) {\n            \$col = \$col->getName();\n        }\n        \$class = NULL;\n        switch (\$col) {\n";
            foreach($collections as $collection) {
                if ($collection->is('GridFs')) {
                    echo "            case ";
                    var_export($collection->getName() . '.files');
                    echo ":\n            case ";
                    var_export($collection->getName() . '.chunks');
                    echo ":\n";
                }
                else {
                    echo "            case ";
                    var_export($collection->getName());
                    echo ":\n";
                }
                if (!$collection->is('SingleCollection')) {
                    echo "                    \$class = ";
                    var_export($collection->getClass());
                    echo ";\n";
                }
                else {
                    echo "                    if (!empty(" . ($collection->getDiscriminator(true)->getPHPVariable()) . ")) {\n                        \$class = " . ($collection->getDiscriminator(true)->getPHPVariable()) . ";\n                    }\n";
                }
                echo "                break;\n";
            }
            echo "        }\n\n        if (empty(\$class)) {\n            throw new \\RuntimeException(\"Cannot get class for collection {\$col}\");\n        }\n\n\n        return \$this->getClass(\$this->class_mapper[\$class]['name'] . '_' . sha1(\$class));\n\n        return \$class;\n    }\n\n    public function get_class(\$object)\n    {\n        if (\$object instanceof ActiveMongo2Mapped) {\n            \$class = \$object->" . ($instance) . "_getClass();\n        } else if (\$object instanceof \\ActiveMongo2\\Reference) {\n            \$class = \$object->getClass();\n        } else {\n            \$class = strtolower(get_class(\$object));\n        }\n\n        return \$class;\n    }\n\n    public function updateProperty(\$document, \$key, \$value)\n    {\n        \$class  = strtolower(\$this->get_class(\$document));\n        \$method = \"update_property_\" . sha1(\$class);\n        if (!is_callable(array(\$this, \$method))) {\n            throw new \\RuntimeException(\"Cannot trigger {\$event} event on '\$class' objects\");\n        }\n\n        return \$this->\$method(\$document, \$key, \$value);\n    }\n\n    public function ensureIndex(\$db)\n    {\n";
            foreach($collections->getIndexes() as $index) {
                echo "            \$db->" . ($index['prop']->getParent()->getName()) . "->ensureIndex(\n                ";
                var_export($index['field']);
                echo ",\n                ";
                var_export($index['extra']);
                echo "\n            );\n";
            }
            echo "    }\n\n";
            foreach($collections as $collection) {
                echo "\n    /**\n     *  Get update object " . ($collection->getClass()) . " \n     */\n    protected function update_" . (sha1($collection->getClass())) . "(Array &\$current, Array \$old, \$embed = false)\n    {\n        if (!\$embed && !empty(\$current['_id']) && \$current['_id'] != \$old['_id']) {\n            throw new \\RuntimeException(\"document ids cannot be updated\");\n        }\n\n";
                if (!$collection->getParent()) {
                    echo "            \$change = array();\n";
                }
                else {
                    echo "            \$change = \$this->update_" . (sha1($collection->getParent())) . "(\$current, \$old, \$embed);\n";
                }
                echo "\n";
                foreach($collection->getProperties() as $prop) {
                    echo "            if (array_key_exists(";
                    var_export($prop.'');
                    echo ", " . ($prop->getPHPBaseVariable('$current')) . ")\n                || array_key_exists(";
                    var_export($prop.'');
                    echo ", \$old)) {\n                if (!array_key_exists(";
                    var_export($prop.'');
                    echo ", " . ($prop->getPHPBaseVariable('$current')) . ")) {\n                    \$change['\$unset'][";
                    var_export($prop.'');
                    echo "] = 1;\n                } else if (!array_key_exists(";
                    var_export($prop.'');
                    echo ", \$old)) {\n                    \$change['\$set'][";
                    var_export($prop.'');
                    echo "] = " . ($prop->getPHPVariable('$current')) . ";\n                } else if (" . ($prop->getPHPVariable('$current')) . " !== \$old[";
                    var_export($prop.'');
                    echo "]) {\n";
                    if ($prop->getAnnotation()->has('Inc')) {
                        echo "                        if (empty(\$old[";
                        var_export($prop.'');
                        echo "])) {\n                            \$prev = 0;\n                        } else {\n                            \$prev = \$old[";
                        var_export($prop.'');
                        echo "];\n                        }\n                        \$change['\$inc'][";
                        var_export($prop.'');
                        echo "] = " . ($prop->GetPHPVariable('$current')) . " - \$prev;\n";
                    }
                    else if ($prop->getAnnotation()->has('Embed')) {
                        echo "                        if (" . ($prop->getPHPVariable('$current')) . "['__embed_class'] != \$old[";
                        var_export($prop.'');
                        echo "]['__embed_class']) {\n                            \$change['\$set'][";
                        var_export($prop.'.');
                        echo " . \$index] = " . ($prop->GetPHPVariable('$current')) . ";\n                        } else {\n                            \$update = 'update_' . sha1(" . ($prop->getPHPVariable('$current')) . "['__embed_class']);\n                            \$diff = \$this->\$update(" . ($prop->getPHPVariable('$current')) . ", \$old[";
                        var_export($prop.'');
                        echo "], true);\n                            foreach (\$diff as \$op => \$value) {\n                                foreach (\$value as \$p => \$val) {\n                                    \$change[\$op][";
                        var_export($prop.'.');
                        echo " . \$p] = \$val;\n                                }\n                            }\n                        }\n";
                    }
                    else if ($prop->getAnnotation()->has('EmbedMany')) {
                        echo "                        // add things to the array\n                        \$toRemove = array_diff_key(\$old[";
                        var_export($prop.'');
                        echo "], " . ($prop->getPHPVariable('$current')) . ");\n\n                        if (count(\$toRemove) > 0 && \$this->array_unique(\$old[";
                        var_export($prop.'');
                        echo "], \$toRemove)) {\n                            \$change['\$set'][";
                        var_export($prop.'');
                        echo "] = array_values(" . ($prop->getPHPVariable('$current')) . ");\n                        } else {\n                            foreach (" . ($prop->getPHPVariable('$current')) . " as \$index => \$value) {\n                                if (!array_key_exists(\$index, \$old[";
                        var_export($prop.'');
                        echo "])) {\n                                    \$change['\$push'][";
                        var_export($prop.'');
                        echo "] = \$value;\n                                    continue;\n                                }\n                                if (\$value['__embed_class'] != \$old[";
                        var_export($prop.'');
                        echo "][\$index]['__embed_class']) {\n                                    \$change['\$set'][";
                        var_export($prop.'.');
                        echo " . \$index] = \$value;\n                                } else {\n                                    \$update = 'update_' . sha1(\$value['__embed_class']);\n                                    \$diff = \$this->\$update(\$value, \$old[";
                        var_export($prop.'');
                        echo "][\$index], true);\n                                    foreach (\$diff as \$op => \$value) {\n                                        foreach (\$value as \$p => \$val) {\n                                            \$change[\$op][";
                        var_export($prop.'.');
                        echo " . \$index . '.' . \$p] = \$val;\n                                        }\n                                    }\n                                }\n                            }\n\n                            foreach (\$toRemove as \$value) {\n                                if (!empty(\$value['__instance'])) {\n                                    \$change['\$pull'][";
                        var_export($prop.'');
                        echo "]['__instance']['\$in'][] = \$value['__instance'];\n                                } else {\n                                    \$change['\$pull'][";
                        var_export($prop.'');
                        echo "][] = \$value;\n                                }\n                            }\n                        }\n";
                    }
                    else if ($prop->getAnnotation()->has('ReferenceMany') || $prop->getAnnotation()->has('Array')) {
                        echo "                        // add things to the array\n                        \$toRemove = array_diff_key(\$old[";
                        var_export($prop.'');
                        echo "], " . ($prop->getPHPVariable('$current')) . ");\n\n                        if (count(\$toRemove) > 0 && \$this->array_unique(\$old[";
                        var_export($prop.'');
                        echo "], \$toRemove)) {\n                            \$change['\$set'][";
                        var_export($prop.'');
                        echo "] = array_values(" . ($prop->getPHPVariable('$current')) . ");\n                        } else {\n                            foreach (" . ($prop->getPHPVariable('$current')) . " as \$index => \$value) {\n                                if (!array_key_exists(\$index, \$old[";
                        var_export($prop.'');
                        echo "])) {\n";
                        if ($prop->getAnnotation()->has('ReferenceMany')) {
                            echo "                                        \$change['\$addToSet'][";
                            var_export($prop.'');
                            echo "]['\$each'][] = \$value;\n";
                        }
                        else {
                            echo "                                        \$change['\$push'][";
                            var_export($prop.'');
                            echo "] = \$value;\n";
                        }
                        echo "                                    continue;\n                                }\n\n                                if (!empty(\$old[";
                        var_export($prop.'');
                        echo "][\$index]['__instance']) && is_array(\$value)) {\n                                    // __instance is an internal variable that helps\n                                    // activemongo2 to remove sub objects from arrays easily.\n                                    // Its value is private to the library and it shouldn't change\n                                    // unless the value of the object changes\n                                    \$diff = \$this->array_diff(\n                                        \$value,\n                                        \$old[";
                        var_export($prop.'');
                        echo "][\$index]\n                                    );\n                                    if (count(\$diff) == 1 && !empty(\$diff['__instance'])) {\n                                        \$value['__instance'] = \$old[";
                        var_export($prop.'');
                        echo "][\$index]['__instance'];\n                                        " . ($prop->getPHPVariable('$current')) . "[\$index] = \$value;\n                                    }\n                                }\n\n                                if (\$old[";
                        var_export($prop.'');
                        echo "][\$index] != \$value) {\n                                    \$change['\$set'][";
                        var_export($prop . '.');
                        echo " . \$index] = \$value;\n                                }\n                            }\n\n                            foreach (\$toRemove as \$value) {\n                                if (!empty(\$value['__instance'])) {\n                                    \$change['\$pull'][";
                        var_export($prop.'');
                        echo "]['__instance']['\$in'][] = \$value['__instance'];\n                                } else {\n                                    \$change['\$pull'][";
                        var_export($prop.'');
                        echo "] = \$value;\n                                }\n                            }\n                        }\n";
                    }
                    else {
                        echo "                        \$change['\$set'][";
                        var_export($prop.'');
                        echo "] = " . ($prop->getPHPVariable('$current')) . ";\n";
                    }



                    echo "                }\n            }\n";
                }
                echo "\n        return \$change;\n    }\n\n    protected function get_mapping_" . (sha1($collection->getClass())) . "() \n    {\n        return array(\n";
                foreach($collection->getProperties() as $prop) {
                    echo "                ";
                    var_export($prop->getName(true));
                    echo " => ";
                    var_export($prop->getProperty());
                    echo ",\n";
                }
                echo "        );\n    }\n\n    /**\n     *  Populate objects " . ($collection->getClass()) . " \n     */\n    protected function populate_" . (sha1($collection->getClass())) . "(\\" . ($collection->getClass()) . " &\$object, \$data)\n    {\n        if (!\$object instanceof ActiveMongo2Mapped) {\n            \$class    = \$this->getClass(";
                var_export($collection->getName() . '_');
                echo " .  sha1(strtolower(get_class(\$object))));\n            \$populate = get_object_vars(\$object);\n            \$object = new \$class;\n            foreach (\$populate as \$key => \$value) {\n                \$object->\$key = \$value;\n            }\n        }\n\n";
                if ($p = $collection->getParent()) {
                    echo "            \$this->populate_" . (sha1($p->getClass())) . "(\$object, \$data);\n";
                }
                echo "\n";
                if ($collection->is('GridFs')) {
                    echo "            if (!\$data instanceof \\MongoGridFsFile) {\n                throw new \\RuntimeException(\"Internal error, trying to populate a GridFSFile with an array\");\n            }\n            \$data_file = \$data;\n            \$data      = \$data->file;\n            if (empty(\$data['metadata'])) {\n                \$data['metadata'] = [];\n            }\n";
                }
                else {
                    echo "\n            if (!is_array(\$data)) {\n                throw new \\RuntimeException(\"Internal error, trying to populate a document with a wrong data\");\n            }\n";
                }
                echo "\n        \$doc = \$data;\n\n";
                foreach($collection->getProperties() as $prop) {
                    if ($prop->getAnnotation()->has('ReferenceMany')) {
                        echo "                if (!empty(" . ($prop->getPHPVariable()) . ")) {\n                    foreach(" . ($prop->getPHPVariable()) . " as \$id => \$sub) {\n                        if (empty(\$sub['__instance']) || !strpos(\$sub['__instance'], \$sub['\$ref'])) {\n                            \$sub['__instance'] = \$sub['\$ref'] . ':' . serialize(\$sub['\$id']) ;\n                        }\n                        " . ($prop->getPHPVariable()) . "[\$id] = \$sub;\n                    }\n                }\n";
                    }
                    else if ($prop->getAnnotation()->has('Stream')) {
                        if ($prop->isPublic()) {
                            echo "                    \$object->" . ($prop->getPHPName()) . " = \$data_file->getResource();\n";
                        }
                        else {
                            echo "                    \$property = new \\ReflectionProperty(\$object, ";
                            var_export($prop->getPHPName());
                            echo ");\n                    \$property->setAccessible(true);\n                    \$property->setValue(\$object, \$data_file->getResource());\n";
                        }
                        continue;
                    }

                    echo "\n            if (array_key_exists(";
                    var_export($prop.'');
                    echo ", " . ($prop->getPHPBaseVariable()) . ")) {\n";
                    foreach($prop->getCallback('Hydratate') as $h) {
                        echo "                    " . ($h->toCode($prop, $prop->getPHPVariable())) . "\n";
                    }
                    echo "\n";
                    if ($prop->isPublic()) {
                        echo "                    \$object->" . ($prop->getPHPName()) . " = " . ($prop->getPHPVariable()) . ";\n";
                    }
                    else {
                        echo "                    \$property = new \\ReflectionProperty(\$object, ";
                        var_export($prop->getPHPName());
                        echo ");\n                    \$property->setAccessible(true);\n                    \$property->setValue(\$object, " . ($prop->getPHPVariable()) . ");\n";
                    }
                    echo "                \n            }\n";
                }
                echo "        \$object->" . ($instance) . "_setOriginal(\$data);\n\n\n    }\n\n    /**\n     *  Get reference of  " . ($collection->getClass()) . " object\n     */\n    protected function get_reference_" . (sha1($collection->getClass())) . "(\\" . ($collection->getClass()) . " \$object, \$include = Array())\n    {\n        \$document = \$this->get_array_" . (sha1($collection->getClass())) . "(\$object);\n        \$extra    = array();\n        if (\$include) {\n            \$extra  = array_intersect_key(\$document, \$include);\n        }\n\n";
                if ($cache = $collection->getRefCache()) {
                    echo "            \$extra = array_merge(\$extra,  array_intersect_key(\n                \$document, \n                ";
                    var_export($cache);
                    echo "\n            ));\n";
                }
                echo "        \n        foreach (\$extra as \$key => \$value) {\n            if (is_object(\$value)) {\n                if (\$value instanceof \\ActiveMongo2\\Reference) {\n                    \$extra[\$key] = \$value->getReference();\n                } else {\n                    \$extra[\$key] = \$this->getReference(\$value);\n                }\n            }\n        }\n\n        return array_merge(array(\n                '\$id'   => \$document['_id'],\n                '\$ref'  => ";
                var_export($collection->getName());
                echo ", \n                '__class' => ";
                var_export($collection->getClass());
                echo ",\n                '__instance' => ";
                var_export($collection->getName());
                echo " . ':' . serialize(\$document['_id']),\n            )\n            , \$extra\n        );\n\n    }\n\n    /**\n     *  Validate " . ($collection->getClass()) . " object\n     */\n    protected function get_array_" . (sha1($collection)) . "(\\" . ($collection) . " \$object, \$recursive = true)\n    {\n";
                if (!$collection->getParent()) {
                    echo "            \$doc = array();\n";
                }
                else {
                    echo "            \$doc = \$recursive ? \$this->get_array_" . (sha1($collection->getParent())) . "(\$object) : array();\n";
                }
                echo "\n";
                foreach($collection->getProperties() as $prop) {
                    if ($prop->isPublic()) {
                        echo "                /* Public property " . ($prop->getPHPName()) . " -> " . ($prop->getName()) . " */\n                if (\$object->" . ($prop->getPHPName()) . " !== NULL) {\n                    " . ($prop->getPHPVariable()) . " = \$object->" . ($prop->getPHPName()) . ";\n                }\n";
                    }
                    else {
                        echo "                \$property = new \\ReflectionProperty(\$object, ";
                        var_export($prop->getPHPName());
                        echo ");\n                \$property->setAccessible(true);\n                " . ($prop->getPHPVariable()) . " = \$property->getValue(\$object);\n";
                    }
                }
                echo "\n";
                foreach($collection->getProperties() as $prop) {
                    foreach($prop->getCallback('DefaultValue') as $default) {
                        echo "                if (empty(" . ($prop->getPHPVariable()) . ")) {\n                    " . ($default->toCode($prop)) . "\n                    " . ($prop->getPHPVariable()) . " = \$return;\n                }\n";
                    }
                }
                echo "\n";
                if ($collection->is('SingleCollection')) {
                    echo "            // SINGLE COLLECTION\n            " . ($collection->getDiscriminator(true)->getPHPVariable()) . " = ";
                    var_export($collection->getClass());
                    echo ";\n";
                }
                echo "\n        return \$doc;\n    }\n\n    /**\n     *  Validate " . ($collection->getClass()) . " object\n     */\n    protected function validate_" . (sha1($collection->getClass())) . "(\\" . ($collection->getClass()) . " \$object)\n    {\n";
                if ($collection->getParent()) {
                    echo "            \$doc = array_merge(\n                \$this->validate_" . (sha1($collection->getParent())) . "(\$object),\n                \$this->get_array_" . (sha1($collection->getClass())) . "(\$object, false)\n            );\n";
                }
                else {
                    echo "            \$doc = \$this->get_array_" . (sha1($collection->getClass())) . "(\$object);\n";
                }
                echo "\n";
                foreach($collection->getProperties() as $prop) {
                    if ($prop->getAnnotation()->has('Required')) {
                        echo "            if (empty(" . ($prop->getPHPVariable()) . ")) {\n                throw new \\RuntimeException(\"" . ($prop.'') . " cannot be empty\");\n            }\n";
                    }
                    foreach($prop->getCallback('Validate') as $val) {
                        echo "                if (!empty(" . ($prop->getPHPVariable()) . ")) {\n                    " . ($val->toCode($prop, $prop->getPHPVariable())) . "\n                    if (\$return === FALSE) {\n                        throw new \\RuntimeException(\"Validation failed for " . ($prop.'') . "\");\n                    }\n                }\n";
                    }
                }
                echo "\n        return \$doc;\n    }\n\n    protected function update_property_" . (sha1($collection->getClass())) . "(\\" . ($collection->getClass()) . " \$document, \$property, \$value)\n    {\n";
                if ($collection->getParent()) {
                    echo "            \$this->update_property_" . (sha1($collection->getParent())) . "(\$document, \$property, \$value);\n";
                }
                foreach($collection->getProperties() as $prop) {
                    echo "            if (\$property ==  ";
                    var_export($prop.'');
                    echo "\n";
                    foreach($prop->getAnnotation()->getAll() as $annotation) {
                        echo "                 || \$property == ";
                        var_export('@'.$annotation['method']);
                        echo "\n";
                    }
                    echo "            ) {\n";
                    if ($prop->isPublic()) {
                        echo "                    \$document->" . ($prop->getPHPName()) . " = \$value;\n";
                    }
                    else {
                        echo "                    \$property = new \\ReflectionProperty(\$object, ";
                        var_export($prop->getPHPNAme());
                        echo ");\n                    \$property->setAccessible(true);\n                    \$property->setValue(\$document, \$value);\n";
                    }
                    echo "            }\n";
                }
                echo "    }\n\n\n";
                foreach($collections->getEvents() as $ev) {
                    echo "    /**\n     *  Code for " . ($ev) . " events for objects " . ($collection->getClass()) . "\n     */\n        protected function event_" . ($ev) . "_" . (sha1($collection->getClass())) . "(\$document, Array \$args)\n        {\n            \$class = \$this->get_class(\$document);\n            if (\$class != ";
                    var_export($collection->getClass());
                    echo " && !is_subclass_of(\$class, ";
                    var_export($collection->getClass());
                    echo ")) {\n                throw new \\Exception(\"Class invalid class name (\$class) expecting  \"  . ";
                    var_export($collection->getClass());
                    echo ");\n            }\n";
                    if ($collection->getParent()) {
                        echo "                \$this->event_" . ($ev) . "_" . (sha1($collection->getParent()->getClass())) . "(\$document, \$args);\n";
                    }
                    echo "\n";
                    foreach($collection->getMethodsByAnnotation($ev) as $method) {
                        echo "                " . ($method->toCode($collection, '$document')) . "\n                if (\$return === FALSE) {\n                    throw new \\RuntimeException;\n                }\n";
                    }
                    echo "\n";
                    if ($ev =="postCreate" || $ev == "postUpdate") {
                        echo "                \$col = \$args[1]->getDatabase()->references_queue;\n";
                        ActiveMongo2\Template\Templates::exec("reference/deferred.tpl.php", compact('ev', 'collection'), $this->context);
                        if ($ev == "postUpdate") {
                            ActiveMongo2\Template\Templates::exec("reference/update.tpl.php", compact('ev', 'collection'), $this->context);
                        }
                    }
                    echo "\n";
                    foreach($collection->getPlugins($ev) as $plugin) {
                        echo "                " . ($plugin->toCode($collection, '$document')) . "\n                if (\$return === FALSE) {\n                    throw new \\RuntimeException;\n                }\n";
                    }
                    echo "        }\n    \n";
                }
                echo "\n";
            }
            echo "}\n\ninterface ActiveMongo2Mapped\n{\n    public function " . ($instance) . "_getClass();\n    public function " . ($instance) . "_setOriginal(Array \$data);\n    public function " . ($instance) . "_getOriginal();\n}\n\n";
            foreach($collections as $collection) {
                echo "/**\n * \n */\nfunction define_class_" . (sha1($collection->getHash())) . "()\n{\n\n    if (!class_exists(";
                var_export("\\".$collection->getClass());
                echo ", false)) {\n        require_once __DIR__ . ";
                var_export($collection->getPath());
                echo ";\n    }\n\n    final class " . ($collection->getHash()) . " extends \\" . ($collection->getClass()) . " implements ActiveMongo2Mapped\n    {\n        private \$" . ($instance) . "_original;\n\n        public function " . ($instance) . "_getClass()\n        {\n            return ";
                var_export($collection->getClass());
                echo ";\n        }\n\n        public function " . ($instance) . "_setOriginal(Array \$data)\n        {\n            \$this->" . ($instance) . "_original = \$data;\n        }\n\n        public function " . ($instance) . "_getOriginal()\n        {\n            return \$this->" . ($instance) . "_original;\n        }\n\n        public function __destruct()\n        {\n            if(is_callable('parent::__destruct')) {\n                parent::__destruct();\n            }\n        }\n    }\n}\n";
            }

            if ($return) {
                return ob_get_clean();
            }

        }
    }

}

namespace ActiveMongo2\Template {

    class Templates
    {
        public static function getAll()
        {
            return array (
                0 => 'callback',
                1 => 'reference/update',
                2 => 'reference/deferred',
                3 => 'documents',
            );
        }

        public static function exec($name, Array $context = array(), Array $global = array())
        {
            $tpl = self::get($name);
            return $tpl->render(array_merge($global, $context));
        }

        public static function get($name, Array $context = array())
        {
            static $classes = array (
                'callback.tpl' => 'class_1895ec604b22a2e3f627b9d8d7ae6142d332247e',
                'callback' => 'class_1895ec604b22a2e3f627b9d8d7ae6142d332247e',
                'reference/update.tpl.php' => 'class_f8c39509b1fb331e8b8ef22a135640af98725ce5',
                'reference/update' => 'class_f8c39509b1fb331e8b8ef22a135640af98725ce5',
                'reference/deferred.tpl.php' => 'class_7e3d172c6b9ee7fd7d68e93c41ee0d852447ceca',
                'reference/deferred' => 'class_7e3d172c6b9ee7fd7d68e93c41ee0d852447ceca',
                'documents.tpl.php' => 'class_4c3d011cafbc519bc12f3ed430a4e169ad8b5e8b',
                'documents' => 'class_4c3d011cafbc519bc12f3ed430a4e169ad8b5e8b',
            );
            $name = strtolower($name);
            if (empty($classes[$name])) {
                throw new \RuntimeException("Cannot find template $name");
            }

            $class = "\\" . $classes[$name];
            return new $class;
        }
    }

}
